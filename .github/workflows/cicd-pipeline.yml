name: Java CI/CD with Maven and Docker

on:
  push:
    branches: [ "main" ]

jobs:
  # This workflow contains a single job called "build-and-push".
  build-and-push:
    # The type of runner that the job will run on. We're using the latest Ubuntu version.
    runs-on: ubuntu-latest
    steps:
    # This action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        # We need to fetch all history for versioning.
        fetch-depth: 0

    # This action sets up a Java JDK, which is required to build the Maven project.
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'

    # We use a script to automatically increment the patch version in the pom.xml file.
    - name: Auto-increment version
      run: |
        # Use Maven's versions plugin to increment the patch version.
        # The -DnewVersion flag specifies the new version format.
        # ${project.version} is a Maven property that gets the current version.
        # The build-helper plugin updates the project version property.
        mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} versions:commit
        # Store the new version in a GitHub environment variable to use in later steps.
        echo "NEW_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

    # This command compiles the application and packages it into a .jar file.
    # The -B flag runs Maven in batch mode (non-interactive).
    - name: Build with Maven
      run: mvn -B package --file pom.xml -DskipTests

    # This is necessary to push the built Docker image to the registry.
    # GitHub secrets used to store the Docker Hub username and access token securely.
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # This step uses a multi-stage Dockerfile to build a lean, optimized Docker image.
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        # The image will be tagged with the new version number.
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/simple-java-maven-app:${{ env.NEW_VERSION }}
